(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{681:function(e,t,r){"use strict";r.r(t);var o=r(57),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"什么是虚拟dom-vdom"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是虚拟dom-vdom"}},[e._v("#")]),e._v(" "),r("a",{attrs:{href:"https://github.com/haizlin/fe-interview/issues/227",target:"_blank",rel:"noopener noreferrer"}},[e._v("什么是虚拟DOM？"),r("OutboundLink")],1),e._v("（VDOM）")]),e._v(" "),r("p",[e._v("Virtual DOM 是 Rect/Vue等框架实现的虚拟DOM，其本质上是JavaScript对象，用于模拟DOM对象，在需要操作DOM的地方，先操作Virtual DOM，再render到真实DOM上，以达到更好的性能。——"),r("a",{attrs:{href:"https://github.com/haizlin/fe-interview/issues/1275#issuecomment-536626676",target:"_blank",rel:"noopener noreferrer"}},[e._v("来源"),r("OutboundLink")],1)]),e._v(" "),r("hr"),e._v(" "),r("p",[e._v("虚拟 dom 是相对于浏览器所渲染出来的真实 dom，在react，vue等技术出现之前，我们要改变页面展示的内容只能通过遍历查询 dom 树的方式找到需要修改的 dom 然后修改样式行为或者结构，来达到更新 ui 的目的。")]),e._v(" "),r("p",[e._v("这种方式相当消耗计算资源，因为每次查询 dom 几乎都需要遍历整颗 dom 树，如果建立一个与 dom 树对应的虚拟 dom 对象（ js 对象），以对象嵌套的方式来表示 dom 树，那么每次 dom 的更改就变成了 js 对象的属性的更改，这样一来就能查找 js 对象的属性变化要比查询 dom 树的性能开销小。——"),r("a",{attrs:{href:"https://github.com/haizlin/fe-interview/issues/227#issuecomment-574561758",target:"_blank",rel:"noopener noreferrer"}},[e._v("来源"),r("OutboundLink")],1)]),e._v(" "),r("hr"),e._v(" "),r("p",[r("code",[e._v("VNode")]),e._v("是真实"),r("code",[e._v("DOM")]),e._v("的映射，其数据结构是普通"),r("code",[e._v("JS")]),e._v("对象，包含"),r("code",[e._v("type")]),e._v("(类型，是组件还是元素)，style，class，children(子组件或子元素)，data(数据模型)等属性，以树的形式嵌套。——"),r("a",{attrs:{href:"https://github.com/haizlin/fe-interview/issues/227#issuecomment-561515757",target:"_blank",rel:"noopener noreferrer"}},[e._v("来源"),r("OutboundLink")],1)]),e._v(" "),r("hr")])}),[],!1,null,null,null);t.default=n.exports}}]);